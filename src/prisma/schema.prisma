
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Global application settings controlled by Super Admin
model AppSettings {
  id                    Int     @id @default(1)
  siteName              String  @default("MealAttend")
  idPrefix              String  @default("ADERA")
  schoolName            String  @default("Tech University")
  idCardTitle           String  @default("STUDENT ID")
  colorTheme            String  @default("default")
  showHomepage          Boolean @default(true)
  showTeamSection       Boolean @default(true)
  companyLogoUrl        String?
  idCardLogoUrl         String?
  defaultUserPassword   String?
  defaultAdminPassword  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// User accounts for accessing the admin panel
model User {
  id                      String    @id @default(cuid())
  userId                  String    @unique // Human-readable ID
  fullName                String
  email                   String    @unique
  password                String
  position                String?
  role                    String    // "Super Admin", "Admin", "User"
  status                  String    // "Active", "Inactive"
  passwordChangeRequired  Boolean   @default(false)
  profileImageURL         String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  // Self-referencing relation for tracking who created the user
  createdById             String?
  createdBy               User?     @relation("UserCreations", fields: [createdById], references: [id], onDelete: SetNull)
  createdUsers            User[]    @relation("UserCreations")

  // Permissions
  canReadStudents         Boolean   @default(true)
  canWriteStudents        Boolean   @default(false)
  canCreateStudents       Boolean   @default(true)
  canDeleteStudents       Boolean   @default(false)
  canExportStudents       Boolean   @default(false)
  
  canReadAttendance       Boolean   @default(false)
  canExportAttendance     Boolean   @default(false)
  
  canReadActivityLog      Boolean   @default(false)
  
  canReadUsers            Boolean   @default(false)
  canWriteUsers           Boolean   @default(false)

  // Obsolete, can be removed in a future migration
  canReadDepartments      Boolean   @default(false)
  canWriteDepartments     Boolean   @default(false)
  
  // Relations
  studentsCreated         Student[]          @relation("CreatedBy")
  attendanceScanned       AttendanceRecord[] @relation("ScannedBy")
  activityLogs            ActivityLog[]      @relation("UserActivity")
}


// Student records
model Student {
  id              String    @id @default(cuid())
  studentId       String    @unique
  name            String
  gender          String?   // "Male", "Female"
  classGrade      String?
  profileImageURL String?
  qrCodeData      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  createdById     String?
  createdBy       User?     @relation("CreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  
  attendanceRecords AttendanceRecord[]
}


// Attendance records for meals
model AttendanceRecord {
  id                  String    @id @default(cuid())
  attendanceId        String    @unique
  mealType            String    // "BREAKFAST", "LUNCH", "DINNER"
  status              String    // "PRESENT", "ABSENT"
  recordDate          DateTime  @db.Date
  scannedAtTimestamp  DateTime?
  
  // Relations
  studentId           String
  student             Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  scannedById         String?
  scannedBy           User?     @relation("ScannedBy", fields: [scannedById], references: [id], onDelete: SetNull)

  @@index([studentId, recordDate, mealType])
}


// Logs for user activities
model ActivityLog {
  id                String    @id @default(cuid())
  logId             String    @unique
  userIdentifier    String    // The userId (e.g., ADERA/USR/...) or email on failed login
  action            String    
  details           String?
  activityTimestamp DateTime  @default(now())
  
  // Relations
  userId            String?
  user              User?     @relation("UserActivity", fields: [userId], references: [id], onDelete: SetNull)
}

// New model for Team Members
model TeamMember {
  id          String  @id @default(cuid())
  name        String
  role        String
  bio         String
  avatarUrl   String?
  displayOrder Int    @default(0)
  isCeo       Boolean @default(false)
  isVisible   Boolean @default(true)
}

// Internal counter for generating sequential IDs
model IdCounter {
  type  String @id // e.g., "STUDENT", "USER", "DEPARTMENT"
  count Int
}
