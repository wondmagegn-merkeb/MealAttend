
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// Models
// ========================================

model Department {
  id           String @id @default(cuid())
  departmentId String @unique
  name         String @unique
  users        User[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id                     String      @id @default(cuid())
  userId                 String      @unique
  fullName               String
  email                  String      @unique
  password               String
  role                   String      @default("User") // 'Admin' or 'User'
  status                 String      @default("Active") // 'Active' or 'Inactive'
  passwordChangeRequired Boolean     @default(true)
  profileImageURL        String?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  departmentId           String?
  department             Department? @relation(fields: [departmentId], references: [id])

  // Permissions
  canReadStudents         Boolean @default(false)
  canWriteStudents        Boolean @default(false)
  canCreateStudents       Boolean @default(false)
  canDeleteStudents       Boolean @default(false)
  canExportStudents       Boolean @default(false)
  canReadAttendance       Boolean @default(false)
  canExportAttendance     Boolean @default(false)
  canReadActivityLog      Boolean @default(false)
  canReadUsers            Boolean @default(false)
  canWriteUsers           Boolean @default(false)
  canReadDepartments      Boolean @default(false)
  canWriteDepartments     Boolean @default(false)


  createdStudents      Student[] @relation("CreatedBy")
  scannedAttendance    AttendanceRecord[] @relation("ScannedBy")
  activityLogs         ActivityLog[]

  passwordResetToken   String?
  passwordResetExpires DateTime?

  @@index([departmentId])
}

model Student {
  id              String   @id @default(cuid())
  studentId       String   @unique
  name            String
  gender          String?
  classGrade      String?
  profileImageURL String?
  qrCodeData      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  createdById     String?
  createdBy       User?    @relation("CreatedBy", fields: [createdById], references: [id])

  attendanceRecords AttendanceRecord[]

  @@index([createdById])
}

model AttendanceRecord {
  id                 String   @id @default(cuid())
  attendanceId       String   @unique
  recordDate         DateTime @db.Date
  mealType           String // BREAKFAST, LUNCH, DINNER
  status             String // PRESENT, ABSENT
  scannedAtTimestamp DateTime @default(now())

  // Relations
  studentId          String
  student            Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  scannedById        String?
  scannedBy          User?    @relation("ScannedBy", fields: [scannedById], references: [id])


  @@index([studentId])
  @@index([scannedById])
  @@index([recordDate])
}


model ActivityLog {
  id                String   @id @default(cuid())
  logId             String   @unique
  userIdentifier    String // This could be userId or email for failed logins
  action            String
  details           String?
  activityTimestamp DateTime @default(now())
  userId            String?  
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
}

model IdCounter {
  type  String @id // 'STUDENT', 'USER', 'DEPARTMENT', 'ATTENDANCE', 'ACTIVITY_LOG'
  count Int    @default(0)
}

model HomepageFeature {
    id            String  @id @default(cuid())
    icon          String
    title         String
    description   String
    displayOrder  Int
    isVisible     Boolean @default(true)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model TeamMember {
    id            String  @id @default(cuid())
    name          String
    role          String
    avatarUrl     String?
    bio           String
    displayOrder  Int
    isCeo         Boolean @default(false)
    isVisible     Boolean @default(true)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}
