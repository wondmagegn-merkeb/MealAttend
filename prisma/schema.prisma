// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// Models
// ========================================

model User {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  fullName               String
  email                  String   @unique
  password               String
  position               String?
  role                   String
  status                 String
  passwordChangeRequired Boolean  @default(true)
  passwordResetRequested Boolean  @default(false)
  profileImageURL        String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  canSeeAllRecords       Boolean  @default(false)

  // Permissions
  canManageSiteSettings Boolean @default(false)
  canReadDashboard      Boolean @default(false)
  canScanId             Boolean @default(false)
  canReadStudents       Boolean @default(true)
  canWriteStudents      Boolean @default(true)
  canCreateStudents     Boolean @default(true)
  canDeleteStudents     Boolean @default(true)
  canExportStudents     Boolean @default(true)
  canReadAttendance     Boolean @default(true)
  canExportAttendance   Boolean @default(true)
  canReadActivityLog    Boolean @default(false)
  canReadUsers          Boolean @default(false)
  canWriteUsers         Boolean @default(false)

  // Relationships
  createdStudents Student[] @relation("StudentCreations")
  createdUsers    User[]    @relation("UserCreations")
  createdById     String?
  createdBy       User?     @relation("UserCreations", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  scannedRecords AttendanceRecord[] @relation("ScannedByUsers")
  activityLogs   ActivityLog[]
}

model Student {
  id              String   @id @default(cuid())
  studentId       String   @unique
  name            String
  gender          String?
  classGrade      String?
  profileImageURL String?
  qrCodeData      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  createdById String?
  createdBy   User?   @relation("StudentCreations", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  attendanceRecords AttendanceRecord[]
}

model AttendanceRecord {
  id                 String   @id @default(cuid())
  attendanceId       String   @unique
  mealType           String
  status             String
  recordDate         DateTime @db.Date
  scannedAtTimestamp DateTime @default(now())

  // Relations
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  scannedById String?
  scannedBy   User?   @relation("ScannedByUsers", fields: [scannedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model ActivityLog {
  id                String   @id @default(cuid())
  logId             String   @unique
  userIdentifier    String
  action            String
  details           String?
  activityTimestamp DateTime @default(now())

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model IdCounter {
  type  String @id // 'STUDENT', 'USER', 'DEPARTMENT', 'ATTENDANCE', 'ACTIVITY_LOG'
  count Int    @default(0)
}

model HomepageFeature {
  id           String   @id @default(cuid())
  icon         String
  title        String
  description  String
  displayOrder Int
  isVisible    Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model TeamMember {
  id           String   @id @default(cuid())
  name         String
  role         String
  avatarUrl    String?
  bio          String
  displayOrder Int
  isCeo        Boolean  @default(false)
  isVisible    Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AppSettings {
  id                        Int      @id @default(1)
  siteName                  String   @default("MealAttend")
  idPrefix                  String   @default("ADERA")
  schoolName                String   @default("Tech University")
  idCardTitle               String   @default("STUDENT ID")
  colorTheme                String   @default("default")
  showHomepage              Boolean  @default(true)
  showTeamSection           Boolean  @default(true)
  showFeaturesSection       Boolean  @default(true)
  homepageSubtitle          String   @default("Learn more about our system and the team behind it.")
  companyLogoUrl            String?
  idCardLogoUrl             String?
  defaultUserPassword       String?
  defaultAdminPassword      String?
  defaultSuperAdminPassword String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}
