// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// Models
// ==============================================================================

model User {
  id                      String    @id @default(cuid())
  userId                  String    @unique // e.g., ADERA/USR/2024/00001
  fullName                String
  email                   String    @unique
  password                String
  position                String?
  role                    String // "Super Admin", "Admin", "User"
  status                  String // "Active" or "Inactive"
  passwordChangeRequired  Boolean   @default(true)
  passwordResetRequested  Boolean   @default(false)
  profileImageURL         String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  createdById             String?
  createdBy               User?     @relation("UserCreations", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdUsers            User[]    @relation("UserCreations")

  createdStudents         Student[] @relation("StudentCreations")
  
  scannedRecords          AttendanceRecord[] @relation("ScannedByUsers")

  activityLogs            ActivityLog[]


  // Permissions
  canReadDashboard        Boolean @default(false)
  canScanId               Boolean @default(false)
  
  canReadStudents         Boolean @default(false)
  canWriteStudents        Boolean @default(false)
  canCreateStudents       Boolean @default(false)
  canDeleteStudents       Boolean @default(false)
  canExportStudents       Boolean @default(false)

  canReadAttendance       Boolean @default(false)
  canExportAttendance     Boolean @default(false)

  canReadActivityLog      Boolean @default(false)

  canReadUsers            Boolean @default(false)
  canWriteUsers           Boolean @default(false)
  
  canSeeAllRecords        Boolean @default(false) // Super admins and admins see all records, users only see their own.
}


model Student {
  id                String   @id @default(cuid())
  studentId         String   @unique // e.g., ADERA/STU/2024/00001
  name              String
  gender            String?
  classGrade        String?
  profileImageURL   String?
  qrCodeData        String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  attendanceRecords AttendanceRecord[]

  createdById       String?
  createdBy         User?              @relation("StudentCreations", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
}


model AttendanceRecord {
  id                 String   @id @default(cuid())
  attendanceId       String   @unique // e.g., ADERA/ATT/2024/00001
  
  studentId          String
  student            Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  scannedById        String?
  scannedBy          User?    @relation("ScannedByUsers", fields: [scannedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  mealType           String
  status             String // "PRESENT" or "ABSENT"
  recordDate         DateTime @db.Date
  scannedAtTimestamp DateTime?

  @@index([recordDate, mealType])
}


model ActivityLog {
    id                  String      @id @default(cuid())
    logId               String      @unique
    userIdentifier      String      // This could be a userId or email for failed attempts
    action              String
    details             String?
    activityTimestamp   DateTime    @default(now())
    
    userId              String?
    user                User?       @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model IdCounter {
  type  String @id // "STUDENT", "USER", etc.
  count Int
}

model AppSettings {
  id                       Int     @id @default(1)
  siteName                 String  @default("MealAttend")
  idPrefix                 String  @default("ADERA")
  schoolName               String  @default("Tech University")
  idCardTitle              String  @default("STUDENT ID")
  colorTheme               String  @default("default")
  showHomepage             Boolean @default(true)
  showTeamSection          Boolean @default(true)
  showFeaturesSection      Boolean @default(true)
  homepageSubtitle         String  @default("Learn more about our system and the team behind it.")
  companyLogoUrl           String?
  idCardLogoUrl            String?
  defaultUserPassword      String?
  defaultAdminPassword     String?
  defaultSuperAdminPassword String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model TeamMember {
  id           String  @id @default(cuid())
  name         String
  role         String
  bio          String
  avatarUrl    String?
  displayOrder Int
  isCeo        Boolean @default(false)
  isVisible    Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model HomepageFeature {
  id           String   @id @default(cuid())
  icon         String
  title        String
  description  String
  displayOrder Int
  isVisible    Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
